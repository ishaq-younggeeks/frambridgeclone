[{"D:\\ishaq\\frame\\src\\App.js":"1","D:\\ishaq\\frame\\src\\index.js":"2","D:\\ishaq\\frame\\src\\reportWebVitals.js":"3","D:\\ishaq\\frame\\src\\Frame1.js":"4"},{"size":4755,"mtime":1615205919973,"results":"5","hashOfConfig":"6"},{"size":500,"mtime":1610287499500,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1610287499500,"results":"8","hashOfConfig":"6"},{"size":13988,"mtime":1615209859102,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1ttftb3",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ishaq\\frame\\src\\App.js",["19"],"import { useDropzone } from \"react-dropzone\";\nimport React, {  useState,useRef, useEffect } from \"react\";\nimport './App.css'\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport Frame1 from './Frame1'\n\n\nfunction App() {\n  const [files, setFiles] = useState([]);\n  const [artDimension,setArtDimension] = useState(\"3\")\n  const [matColour,setMatColour] = useState(\"3\")\n  const [openCrop,setOpenCrop] = useState(false)\n  const [croppedImage,setCroppedImage] = useState(\"\")\n\n  const cropperRef = useRef(null);\n  const onCrop = () => {\n    const imageElement = cropperRef.current;\n    const cropper = imageElement.cropper;\n    console.log(\"cropper\",cropper)\n    setCroppedImage(cropper.getCroppedCanvas().toDataURL())\n\n  };\n\n\n  const addFiles = (img) =>{\n    setFiles(img)\n  }\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    if(files.length)\n   console.log(\"files\",files[0].path)\n  },[files]);\n\n  const handleArtDimension = (e) => {\nsetArtDimension(e.target.value)\n    console.log(\"targetd value\",e.target.value)\n  }\n\n  const handleMatStyle = (e) => {\n    setMatColour(e.target.value)\n  }\n\n\n  const handleCrop = () => {\n      setOpenCrop(true)\n  }\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <div className=\"left_portion\">\n        <Frame1\n        croppedImage={croppedImage}\n        matColour={matColour}\n        artDimension ={artDimension}\n        />\n          </div>\n          <div className=\"right_portion\">\n            <div>\n              <select value={artDimension} onChange={handleArtDimension}>\n              <option label='\"3 x 4.00\"' value=\"3\"></option>\n              <option label='\"4 x 5.33\"' value=\"4\"></option>\n              <option label='\"5 x 6.67\"' value=\"5\"></option>\n              </select>\n              </div>\n              <div>\n              <select value={matColour} onChange={handleMatStyle}>\n              <option label='black' value=\"1\"></option>\n              <option label='red' value=\"2\"></option>\n              <option label='white' value=\"3\" ></option>\n              </select>\n              </div>\n          <Doka addFiles={addFiles} files={files} handleCrop={handleCrop}/>\n          {openCrop && <><div className=\"clearfix\" style={{height:\"300px\",width:\"400px\"}}>\n            <img\n              style={{ width: \"100%\" }}\n              src={croppedImage}\n              alt=\"cropped image\"\n            />\n            </div><div>\n            <Cropper\n      src={files[0].preview}\n      style={{ height: 400, width: \"100%\" }}\n      // Cropper.js options\n      initialAspectRatio={16 / 9}\n      guides={false}\n      crop={onCrop}\n      ref={cropperRef}\n    />\n          </div></>}\n          </div>\n        </div>\n     \n\n    </React.Fragment>\n  );\n}\n\nconst thumbsContainer = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  marginTop: 16,\n  padding: 20,\n};\n\nconst thumb = {\n  position: \"relative\",\n  display: \"inline-flex\",\n  borderRadius: 2,\n  border: \"1px solid #eaeaea\",\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: \"border-box\",\n};\n\nconst thumbInner = {\n  display: \"flex\",\n  minWidth: 0,\n  overflow: \"hidden\",\n};\n\nconst img = {\n  display: \"block\",\n  width: \"auto\",\n  height: \"100%\",\n};\n\nconst thumbButton = {\n  position: \"absolute\",\n  right: 10,\n  bottom: 10,\n  background: \"rgba(0,0,0,.8)\",\n  color: \"#fff\",\n  border: 0,\n  borderRadius: \".325em\",\n  cursor: \"pointer\",\n};\n\n\n\nfunction Doka(props) {\n\n\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: \"image/*\",\n    maxFiles: 1,\n    onDrop: (acceptedFiles) => {\n     \n        let data = acceptedFiles.map((file) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          }\n        )\n      );\n      props.addFiles(data)\n    },\n  });\n\n  const thumbs = props.files.map((file, index) => (\n    <div style={thumb} key={file.name}>\n      <div style={thumbInner}>\n        <img src={file.preview} style={img} alt=\"\" />\n      </div>\n      <button\n        style={thumbButton}\n        onClick = {props.handleCrop}\n     >\n        edit\n      </button>\n    </div>\n  ));\n\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      props.files.forEach((file) => URL.revokeObjectURL(file.preview));\n    },\n    [props.files]\n  );\n\n  return (\n    <section className=\"container\">\n      <div\n        {...getRootProps({ className: \"dropzone\" })}\n        style={{ width: \"300px\", height: \"100px\", border: \"1px solid grey\" }}\n      >\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      </div>\n      <aside style={thumbsContainer}>{thumbs}</aside>\n    </section>\n  );\n}\n\nexport default App;\n","D:\\ishaq\\frame\\src\\index.js",[],"D:\\ishaq\\frame\\src\\reportWebVitals.js",[],"D:\\ishaq\\frame\\src\\Frame1.js",[],{"ruleId":"20","severity":1,"message":"21","line":76,"column":13,"nodeType":"22","endLine":80,"endColumn":15},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]